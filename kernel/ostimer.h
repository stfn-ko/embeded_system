////////////////////////////////////////////////////////////////////////////////
/// OSTIMER.H
///
/// Class for kernel-based non-blocking timers
///
///
/// Dr J A Gow 2022
///
////////////////////////////////////////////////////////////////////////////////

#ifndef OSTIMER_H_
#define OSTIMER_H_

#include "sysincs.h"

namespace Kernel
{

	class OSTimer
	{

	private:
		unsigned long tmr, time, freeze;
		unsigned char frozen;

	public:
		////////////////////////////////////////////////////////////////////////
		/// OSTimer
		///
		/// CONSTRUCTOR
		///
		/// Initializes variables for a nonblocking task-time timer
		///
		////////////////////////////////////////////////////////////////////////

		OSTimer(unsigned long timeout = 0);

		////////////////////////////////////////////////////////////////////////
		/// ~OSTimer
		///
		/// DESTRUCTOR
		///
		/// This doesn't need to do anything as our class isn't dynamically
		/// called.
		///
		////////////////////////////////////////////////////////////////////////

		~OSTimer();

		////////////////////////////////////////////////////////////////////////
		/// Set
		///
		/// Set the timeout to a specific value
		///
		/// @context: TASK
		/// @scope: PUBLIC
		/// @param: unsigned int timeout
		/// @return: none
		///
		////////////////////////////////////////////////////////////////////////

		void Set(unsigned long timeout);

		////////////////////////////////////////////////////////////////////////
		/// Restart
		///
		/// Restart the timer to the previously set value
		///
		///
		/// @context: TASK
		/// @scope: PUBLIC
		/// @param: unsigned int timeout
		/// @return: none
		///
		////////////////////////////////////////////////////////////////////////

		void OSTimer::Restart();

		////////////////////////////////////////////////////////////////////////
		/// isExpired
		///
		/// Check if the timer has expired. It may have done some time ago -
		/// this is not interrupt driven
		///
		/// @context: ANY
		/// @scope: PUBLIC
		/// @param: none
		/// @return: int. Nonzero if timer has expired
		///
		////////////////////////////////////////////////////////////////////////

		int isExpired(void);

		////////////////////////////////////////////////////////////////////////
		/// Freeze
		///
		/// Stop a timer from counting
		///
		/// @context: ANY
		/// @scope: PUBLIC
		/// @param: NONE
		/// @return: NONE
		///
		////////////////////////////////////////////////////////////////////////

		void Freeze(void);

		////////////////////////////////////////////////////////////////////////
		/// Thaw
		///
		/// Resume a frozen timer
		///
		/// @context: ANY
		/// @scope: PUBLIC
		/// @param: NONE
		/// @return: NONE
		///
		////////////////////////////////////////////////////////////////////////

		void Thaw(void);
	};
}

#endif
